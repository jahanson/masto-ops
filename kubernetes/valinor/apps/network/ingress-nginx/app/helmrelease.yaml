---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ingress-nginx
spec:
  interval: 30m
  chart:
    spec:
      chart: ingress-nginx
      version: 4.7.0
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: flux-system
      interval: 30m
  values:
    controller:
      replicaCount: 3

      hostPort:
        enabled: true
        ports:
          http: 81
          https: 444

      updateStrategy:
        type: RollingUpdate

      service:
        enabled: true
        type: LoadBalancer
        annotations:
          external-dns.alpha.kubernetes.io/hostname: "ingress.valinor.social"
          io.cilium/lb-ipam-ips: "10.45.0.1"
        externalTrafficPolicy: Local

      publishService:
        enabled: true

      ingressClassResource:
        default: true

      config:
        client-header-timeout: 120
        client-body-buffer-size: "100M"
        client-body-timeout: 120
        enable-brotli: "true"
        enable-real-ip: "true"
        use-proxy-protocol: "true"
        hsts-max-age: "31449600"
        keep-alive: 120
        keep-alive-requests: 10000
        # log-format-escape-json: "true"
        # log-format-upstream: >
        #   {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr",
        #   "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id",
        #   "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time,
        #   "status": $status, "vhost": "$host", "request_proto": "$server_protocol",
        #   "path": "$uri", "request_query": "$args", "request_length": $request_length,
        #   "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer",
        #   "http_user_agent": "$http_user_agent"}
        proxy-body-size: 0
        proxy-buffer-size: "16k"
        ssl-protocols: "TLSv1.3 TLSv1.2"
        use-forwarded-headers: "true"
        plugins: "crowdsec"
        lua-shared-dicts: "crowdsec_cache: 50m"

      metrics:
        enabled: true
      extraArgs:
        default-ssl-certificate: "network/valinor-social-tls"

      topologySpreadConstraints:
        - maxSkew: 2
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/component: controller
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - controller
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - ingress-nginx
              topologyKey: kubernetes.io/hostname

      resources:
        requests:
          cpu: 23m
          memory: 381M

      # Crowdsec Bouncer Plugin
      extraVolumes:
        - name: crowdsec-bouncer-plugin
          emptyDir: {}
      extraInitContainers:
        - name: init-clone-crowdsec-bouncer
          image: crowdsecurity/lua-bouncer-plugin
          imagePullPolicy: IfNotPresent
          env:
            - name: API_URL
              value: "http://crowdsec-service.security.svc.cluster.local:8080"
            - name: API_KEY
              value: "966243e72e69705684d9e9d2f6e87ddc"
            - name: BOUNCER_CONFIG
              value: "/crowdsec/crowdsec-bouncer.conf"
          command: ['sh', '-c', "sh /docker_start.sh; mkdir -p /lua_plugins/crowdsec/; cp -R /crowdsec/* /lua_plugins/crowdsec/"]
          volumeMounts:
            - name: crowdsec-bouncer-plugin
              mountPath: /lua_plugins
      extraVolumeMounts:
        - name: crowdsec-bouncer-plugin
          mountPath: /etc/nginx/lua/plugins/crowdsec
          subPath: crowdsec

    defaultBackend:
      enabled: false
